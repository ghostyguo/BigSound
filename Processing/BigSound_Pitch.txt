import processing.serial.*; 
 
Serial myPort; 
int LF = 10;     

// Scope parameter
int scopeWidth=512, scopeHeight=400;
float[] scopeData1=new float[scopeWidth];
float[] scopeData2=new float[scopeWidth];
float[] scopeData3=new float[scopeWidth];
boolean showLine1=true, showLine2=true, showLine3=true;
// Internal variable
int startPosition=0; //try startPosition=scopeWidth-1
int samplingCount = 0;
float gainValue=10.0;
float variance=0.0;
float pitchFrequency=0.0;

// IO variables
String inString;
int soundValue = 0;
 
//--------------------------------
// FFT Library
//--------------------------------
// FFT
int fft_n, fft_m;
float[] cos; // Lookup tables. Only need to recompute when size of FFT changes.
float[] sin;
float[] spectrumDataRe = new float[scopeWidth];
float[] spectrumDataIm = new float[scopeWidth];

public void fft(float[] re, float[] im) 
{
  int i, j, k, n1, n2, a;
  float c, s, t1, t2;

  // Bit-reverse
  j = 0;
  n2 = fft_n / 2;
  for (i = 1; i < fft_n - 1; i++) 
  {
    n1 = n2;
    while (j >= n1) 
    {
      j = j - n1;
      n1 = n1 / 2;
    }
    j = j + n1;

    if (i < j) 
    {
      t1 = re[i];
      re[i] = re[j];
      re[j] = t1;
      t1 = im[i];
      im[i] = im[j];
      im[j] = t1;
    }
  }

  // FFT
  n1 = 0;
  n2 = 1;

  for (i = 0; i < fft_m; i++) 
  {
    n1 = n2;
    n2 = n2 + n2;
    a = 0;

    for (j = 0; j < n1; j++) 
    {
      c = cos[a];
      s = sin[a];
      a += 1 << (fft_m - i - 1);

      for (k = j; k < fft_n; k = k + n2) 
      {
        t1 = c * re[k + n1] - s * im[k + n1];
        t2 = s * re[k + n1] + c * im[k + n1];
        re[k + n1] = re[k] - t1;
        im[k + n1] = im[k] - t2;
        re[k] = re[k] + t1;
        im[k] = im[k] + t2;
      }
    }
  }
} //public void fft()
 
 
void setup() 
{ 
  size(scopeWidth,scopeHeight); 
  textSize(20);
  //frameRate(30); // try maximum frameRate

  myPort = new Serial(this,  "COM7", 57600); 
  //myPort.bufferUntil(LF); // not used in fast mode
  
  for (int i=0; i<scopeWidth; i++)
  {
    scopeData1[i] = 0;
    scopeData2[i] = 0;
    scopeData3[i] = 0;
  }  
  
  // ----------- Setup FFT -----------------------
  fft_n = scopeWidth;
  fft_m = (int) (Math.log(fft_n) / Math.log(2));

  // Make sure n is a power of 2
  if (fft_n != (1 << fft_m))
    throw new RuntimeException("FFT length must be power of 2");

  // precompute tables
  cos = new float[fft_n / 2];
  sin = new float[fft_n / 2];

  for (int i = 0; i < fft_n / 2; i++) 
  {
    cos[i] = (float)(Math.cos(-2 * Math.PI * i / fft_n));
    sin[i] = (float)(Math.sin(-2 * Math.PI * i / fft_n));
  }
}

// ---------------------------------------------------------
void draw() 
{ 
  background(0); 
  stroke(128,128,128); //gray
  line(0, scopeHeight/2, scopeWidth-1, scopeHeight/2);
  

  stroke(0,0,255); //blue
  fill(0,0,255);
  text("SoundValue: " + soundValue, 10, 30); 
  text("scopeGain: " + gainValue, scopeWidth/2,30); 
  text("FrameRate: " + (int)frameRate, 10, 60); // for speed tuniung
  float samplingFrequency = samplingCount*frameRate;
  if (samplingFrequency<1000) 
    return; 
  text("SamplingRate: " + (int)(samplingFrequency), scopeWidth/2, 60); 
  samplingCount = 0;

  // ------------ Show time series data -------------------
  //noFill();
  float Amplitude = gainValue;
  int plotX=0;
  for (int i=startPosition+1; i<scopeWidth-1; i++)
  {
    if (showLine1)
    {
      stroke(255,0,0); //red
      line(plotX, scopeHeight - scopeData1[i]/256.0*scopeHeight, //fast mode scale=256
           plotX+1, scopeHeight - scopeData1[i+1]/256*scopeHeight);
    }
    if (showLine2)
    {
      stroke(0,255,0); //green
      line(plotX, scopeHeight/2 - scopeData2[i]*Amplitude, 
           plotX+1, scopeHeight/2 - scopeData2[i+1]*Amplitude);
    }
    plotX++;
  }
  for (int i=0; i<startPosition; i++)
  {
    if (showLine1)
    {
      stroke(255,0,0); //red
      line(plotX, scopeHeight - scopeData1[i]/256.0*scopeHeight,
           plotX+1, scopeHeight - scopeData1[i+1]/256*scopeHeight);
    }
    if (showLine2)
    {
      stroke(0,255,0); //green
      line(plotX, scopeHeight/2 - scopeData2[i]*Amplitude,
           plotX+1, scopeHeight/2 - scopeData2[i+1]*Amplitude);
    }
    plotX++;
  }
  
   // ------------ Show Spectrum -------------------
  if (showLine3)
  {
    // Calculate Spectrum by FFT
    for (int i=0; i<scopeWidth; i++)
    {
      spectrumDataRe[i] = scopeData2[i];
      spectrumDataIm[i] = 0;
    }
    fft(spectrumDataRe,spectrumDataIm);
    for (int i=0; i<scopeWidth; i++) //Convert to Amplitude 
    {
      scopeData3[i] = sqrt(spectrumDataRe[i]*spectrumDataRe[i]+spectrumDataIm[i] *spectrumDataIm[i]);
    }
   
   // plot
    float fftScale=1;    
    stroke(255); //white
    for (int i=0; i<scopeWidth/2-1; i++) {
      line(i*2, scopeHeight - scopeData3[i]*fftScale - 10,
           (i+1)*2, scopeHeight - scopeData3[i+1]*fftScale - 10);
    }     
    
    // Search Peak
    int startFreqIndex = (int)(200/samplingFrequency*scopeWidth);  //150Hz
    int stopFreqIndex  = (int)(1000/samplingFrequency*scopeWidth); //1000Hz
    int pitchIndex = 0;
    float maxPeak=0;
    for (int i=startFreqIndex; i<stopFreqIndex; i++)
    {
      if ((scopeData3[i]>10) && // threshold
          (scopeData3[i]>maxPeak))
      {
        pitchIndex = i;
        maxPeak = scopeData3[i];
      }    
    }    
    float PitchFrequency=pitchIndex*samplingFrequency/scopeWidth;
    text("PitchFrequency: " + (int)(PitchFrequency), 10,90); 
    stroke(255,0,0); //red
    fill(255,0,0);
    ellipse(pitchIndex*2, scopeHeight - scopeData3[pitchIndex]*fftScale - 10, 10, 10);
  }  
} 
 
void serialEvent(Serial p) 
{ 
  // Read data from serial port
  soundValue = p.readChar(); // 
  samplingCount++;
  
  // Place the soundValue into data array
  if (++startPosition>=scopeWidth) // update pointer
  {
    startPosition = 0;
  }
  scopeData1[startPosition] = soundValue;
  
  // Calculate Mean
  float mean=0.0;
  for (int i=0; i<scopeWidth-1; i++)
  {
    mean += scopeData1[i]/scopeWidth;
  }    
  scopeData2[startPosition] = soundValue - mean; // get diff amplitude
  
  // Calculate Variance
  variance=0.0;
  for (int i=0; i<scopeWidth-1; i++)
  {
    variance += (scopeData2[i]*scopeData2[i]);
  }
  variance = sqrt(variance)/scopeWidth;
  
  // Autogain
  //gainValue = scopeHeight/variance;
  //if (gainValue>10) 
  //  gainValue=10;
  //gainValue=1;  

}

void keyPressed() {
  if (key=='1')
    showLine1 = !showLine1;
  if (key=='2')
    showLine2 = !showLine2;
  if (key=='3')
    showLine3 = !showLine3;
  if (key=='+')
    gainValue = gainValue+0.5;
  if (key=='-')
    gainValue = gainValue-0.5;
  if (gainValue<0)
    gainValue=0; 
}

